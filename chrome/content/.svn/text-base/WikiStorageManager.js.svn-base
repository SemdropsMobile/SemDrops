/**
	El WSM es un almacenador en wikis el mismo se encarga de poder meter todos los 
	datos personales de un usuario dentro de una wiki que llevara el mismo nombre del
	user.
*/
var _auxdom
var auxuri;
var wikiuri;
var _browser;
var _value;
var _attribute;
var _newvalue;
var _newattribute;
var _idlabel;

function Wikistoragemanager()
{
	this._uriwiki;
	this._timer;
	
/**
 * Esta funcion inicializa el objeto wiki storage manager, obteniendo el nombre de la wiki local y la visualizada por 
 * el usuario
 */	
	this.initialize = function (browser)
									{
										_browser = browser;
										_timer = Components.classes["@mozilla.org/timer;1"].createInstance(Components.interfaces.nsITimer);
										_uriwiki = document.getElementById("wikiname").value+"?title="+document.getElementById("username").value;
									}
/**
 * Escribe el valor presentado dentro de la wiki, derivandole el valor a cargar y la url al objeto BROWSER
 * usa un template al igual que dellete y modifi para no repetir codigo.
 */	
	this.write = function (value,attribute,idlabel)
									{
										_value = value;
										_attribute = attribute;
										_idlabel = idlabel;
										templateWikiFunction(functionadd);
									}
									
	/*Esta con dos ll poruqe delete es una palabra reservada por JS*/
	this.dellete = function (value,attribute)
									{
										_value = value;
										_attribute = attribute;
										templateWikiFunction(functiondel);
									}
									
	this.modifi = function (value,attribute,newvalue,newattribute)
									{
										_value = value;
										_attribute = attribute;
										_newvalue = newvalue;
										_newattribute = newattribute;
										templateWikiFunction(functionmod);
									}
	/**
	 * publica el valor del elemento seleccionado en la wiki que actualmente esta visualizando el browser.
	 * para ello obtiene el valor a cargar y se lo deriba al browser.
	 */
	this.publish = function (core,labelid)
									{
										document.onmousedown = null;
										document.onmousemove = null;
										url = _browser.getActualUri();
										var cont=0;
										for (i=url.length; url[i] != "/" || i == 0;i--)
										{
											cont++;	
										}
										url = url.substring(0,url.length - cont);
										var name = _actualUri.substring(_actualUri.length - --cont,_actualUri.length);
										_browser.refresh(url+"?title="+name+"&action=edit");
										var xmlreq = createXMLHTTPobject();
										xmlreq.onreadystatechange = function ()
										{
											if (xmlreq.readyState == 4)
											{
												_browser.publish(core,labelid);
											}
										}
										xmlreq.open("GET",url+"?title="+name+"&action=edit");
										xmlreq.send(null);
									}
}

// FUNCIONES AJENAS AL OBJETO WIKISTORAGEMANAGER, EL OBJETO LAS PUEDE VER Y USAR Y NO ESTAN DISPONIBLES PARA LOS DEMAS
// OBJETOS.

/**
 * esta funcion espera un delay de 1 segundo y refresca el semdrops
 */
function returnToPage()
{
	var event = { notify : function(timer) {window.location.reload();}}
	_timer.initWithCallback(event,1000,Components.interfaces.nsITimer.TYPE_ONE_SHOT);
}
/**
 *  Esta funcion se usa dentro del template y le dice al browser que debe agregar un elemento a la wiki.
 */
function functionadd()
{
	_browser.addInUserSpace(_value,_attribute,_idlabel,auxuri,_auxdom);
}
/**
 * Idem funcionadd pero borra en lugar de agregar.
 */
function functiondel()
{
	_browser.delInUserSpace(_value,_attribute,auxuri,_auxdom);
}
/**
 * Idem funcionadd pero modifica en lugar de agregar.
 */
function functionmod()
{
	_browser.modInUserSpace(_value,_attribute,_newvalue,_newattribute,auxuri,_auxdom);
}

/**
 * Template method para no repetir codigo sin necesidad... la var "fun" es una 
 * function que se ejecuta para su correspondiente ya sea si se agrogo, borro 
 * o modifico un valor.
 */

function templateWikiFunction(fun)
{
	document.onmousedown = null;
	document.onmousemove = null;
	auxuri = _browser.getActualUri();
	wikiuri = _uriwiki +"-"+ auxuri+"wikistorage" + "&action=edit";
	_auxdom = window.open(wikiuri,' ','width=1,height=1,top=1,left=1');
	var xmlreq = createXMLHTTPobject();
	xmlreq.onreadystatechange = function ()
	{
		if (xmlreq.readyState == 4)
		{
			fun();
			var event = { notify : function(timer) {returnToPage();}}
			_timer.initWithCallback(event,1000,Components.interfaces.nsITimer.TYPE_ONE_SHOT);
		}
	}
	xmlreq.open("GET",wikiuri);
	xmlreq.send(null);
}

/**
 * como el request no es un estandar de la w3c se utiliza esta funcion para poder crear un objeto xmlhttprequest
 */

function createXMLHTTPobject() {

var xmlhttp;

if (window.XMLHttpRequest) 
{ // Mozilla, Safari,...
	xmlhttp = new XMLHttpRequest();
	if (xmlhttp.overrideMimeType) 
	{
		xmlhttp.overrideMimeType('text/xml');
	}
} 
else 
	if (window.ActiveXObject) 
	{ // IE
	try 
		{
			xmlhttp = new ActiveXObject("Msxml2.XMLHTTP");
		} 
		catch (e) 
				{
				try {
						xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
					} 
					catch (e) {}
				}
	}
return xmlhttp;
}